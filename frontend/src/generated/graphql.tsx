import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** An ISO 8601-encoded date */
  ISO8601Date: any;
};

export type Chat = {
  __typename?: 'Chat';
  createdAt: Scalars['ISO8601Date'];
  id: Scalars['ID'];
  message: Scalars['String'];
  username: Scalars['String'];
};

/** Autogenerated input type of ChatCreate */
export type ChatCreateInput = {
  username: Scalars['String'];
  message: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of ChatCreate */
export type ChatCreatePayload = {
  __typename?: 'ChatCreatePayload';
  chat: Chat;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of ChatSubscription */
export type ChatSubscriptionPayload = {
  __typename?: 'ChatSubscriptionPayload';
  chat: Chat;
};


/** Autogenerated input type of KeyPressCreate */
export type KeyPressCreateInput = {
  isTyping: Scalars['Boolean'];
  username: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of KeyPressCreate */
export type KeyPressCreatePayload = {
  __typename?: 'KeyPressCreatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  isTyping: Scalars['Boolean'];
  username: Scalars['String'];
};

export type KeyPressResponse = {
  __typename?: 'KeyPressResponse';
  isTyping: Scalars['Boolean'];
  username: Scalars['String'];
};

/** Autogenerated return type of KeyPressSubscription */
export type KeyPressSubscriptionPayload = {
  __typename?: 'KeyPressSubscriptionPayload';
  response: KeyPressResponse;
};

export type Mutation = {
  __typename?: 'Mutation';
  chatCreate?: Maybe<ChatCreatePayload>;
  onKeypress?: Maybe<KeyPressCreatePayload>;
};


export type MutationChatCreateArgs = {
  input: ChatCreateInput;
};


export type MutationOnKeypressArgs = {
  input: KeyPressCreateInput;
};

export type Query = {
  __typename?: 'Query';
  chats: Array<Chat>;
};

export type Subscription = {
  __typename?: 'Subscription';
  onChatReceived: ChatSubscriptionPayload;
  onKeypress: KeyPressSubscriptionPayload;
};

export type ChatFieldsFragment = (
  { __typename?: 'Chat' }
  & Pick<Chat, 'id' | 'message' | 'username' | 'createdAt'>
);

export type ChatCreateMutationVariables = Exact<{
  input: ChatCreateInput;
}>;


export type ChatCreateMutation = (
  { __typename?: 'Mutation' }
  & { chatCreate?: Maybe<(
    { __typename?: 'ChatCreatePayload' }
    & { chat: (
      { __typename?: 'Chat' }
      & ChatFieldsFragment
    ) }
  )> }
);

export type ChatsQueryVariables = Exact<{ [key: string]: never; }>;


export type ChatsQuery = (
  { __typename?: 'Query' }
  & { chats: Array<(
    { __typename?: 'Chat' }
    & ChatFieldsFragment
  )> }
);

export type OnChatReceivedSubscriptionVariables = Exact<{ [key: string]: never; }>;


export type OnChatReceivedSubscription = (
  { __typename?: 'Subscription' }
  & { onChatReceived: (
    { __typename?: 'ChatSubscriptionPayload' }
    & { chat: (
      { __typename?: 'Chat' }
      & ChatFieldsFragment
    ) }
  ) }
);

export type SendKeyPressMutationVariables = Exact<{
  input: KeyPressCreateInput;
}>;


export type SendKeyPressMutation = (
  { __typename?: 'Mutation' }
  & { onKeypress?: Maybe<(
    { __typename?: 'KeyPressCreatePayload' }
    & Pick<KeyPressCreatePayload, 'isTyping' | 'username'>
  )> }
);

export type OnKeyPressSubscriptionVariables = Exact<{ [key: string]: never; }>;


export type OnKeyPressSubscription = (
  { __typename?: 'Subscription' }
  & { onKeypress: (
    { __typename?: 'KeyPressSubscriptionPayload' }
    & { response: (
      { __typename?: 'KeyPressResponse' }
      & Pick<KeyPressResponse, 'isTyping' | 'username'>
    ) }
  ) }
);

export const ChatFieldsFragmentDoc = gql`
    fragment ChatFields on Chat {
  id
  message
  username
  createdAt
}
    `;
export const ChatCreateDocument = gql`
    mutation ChatCreate($input: ChatCreateInput!) {
  chatCreate(input: $input) {
    chat {
      ...ChatFields
    }
  }
}
    ${ChatFieldsFragmentDoc}`;
export type ChatCreateMutationFn = Apollo.MutationFunction<ChatCreateMutation, ChatCreateMutationVariables>;

/**
 * __useChatCreateMutation__
 *
 * To run a mutation, you first call `useChatCreateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useChatCreateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [chatCreateMutation, { data, loading, error }] = useChatCreateMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useChatCreateMutation(baseOptions?: Apollo.MutationHookOptions<ChatCreateMutation, ChatCreateMutationVariables>) {
        return Apollo.useMutation<ChatCreateMutation, ChatCreateMutationVariables>(ChatCreateDocument, baseOptions);
      }
export type ChatCreateMutationHookResult = ReturnType<typeof useChatCreateMutation>;
export type ChatCreateMutationResult = Apollo.MutationResult<ChatCreateMutation>;
export type ChatCreateMutationOptions = Apollo.BaseMutationOptions<ChatCreateMutation, ChatCreateMutationVariables>;
export const ChatsDocument = gql`
    query Chats {
  chats {
    ...ChatFields
  }
}
    ${ChatFieldsFragmentDoc}`;

/**
 * __useChatsQuery__
 *
 * To run a query within a React component, call `useChatsQuery` and pass it any options that fit your needs.
 * When your component renders, `useChatsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useChatsQuery({
 *   variables: {
 *   },
 * });
 */
export function useChatsQuery(baseOptions?: Apollo.QueryHookOptions<ChatsQuery, ChatsQueryVariables>) {
        return Apollo.useQuery<ChatsQuery, ChatsQueryVariables>(ChatsDocument, baseOptions);
      }
export function useChatsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ChatsQuery, ChatsQueryVariables>) {
          return Apollo.useLazyQuery<ChatsQuery, ChatsQueryVariables>(ChatsDocument, baseOptions);
        }
export type ChatsQueryHookResult = ReturnType<typeof useChatsQuery>;
export type ChatsLazyQueryHookResult = ReturnType<typeof useChatsLazyQuery>;
export type ChatsQueryResult = Apollo.QueryResult<ChatsQuery, ChatsQueryVariables>;
export const OnChatReceivedDocument = gql`
    subscription OnChatReceived {
  onChatReceived {
    chat {
      ...ChatFields
    }
  }
}
    ${ChatFieldsFragmentDoc}`;

/**
 * __useOnChatReceivedSubscription__
 *
 * To run a query within a React component, call `useOnChatReceivedSubscription` and pass it any options that fit your needs.
 * When your component renders, `useOnChatReceivedSubscription` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useOnChatReceivedSubscription({
 *   variables: {
 *   },
 * });
 */
export function useOnChatReceivedSubscription(baseOptions?: Apollo.SubscriptionHookOptions<OnChatReceivedSubscription, OnChatReceivedSubscriptionVariables>) {
        return Apollo.useSubscription<OnChatReceivedSubscription, OnChatReceivedSubscriptionVariables>(OnChatReceivedDocument, baseOptions);
      }
export type OnChatReceivedSubscriptionHookResult = ReturnType<typeof useOnChatReceivedSubscription>;
export type OnChatReceivedSubscriptionResult = Apollo.SubscriptionResult<OnChatReceivedSubscription>;
export const SendKeyPressDocument = gql`
    mutation SendKeyPress($input: KeyPressCreateInput!) {
  onKeypress(input: $input) {
    isTyping
    username
  }
}
    `;
export type SendKeyPressMutationFn = Apollo.MutationFunction<SendKeyPressMutation, SendKeyPressMutationVariables>;

/**
 * __useSendKeyPressMutation__
 *
 * To run a mutation, you first call `useSendKeyPressMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSendKeyPressMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [sendKeyPressMutation, { data, loading, error }] = useSendKeyPressMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSendKeyPressMutation(baseOptions?: Apollo.MutationHookOptions<SendKeyPressMutation, SendKeyPressMutationVariables>) {
        return Apollo.useMutation<SendKeyPressMutation, SendKeyPressMutationVariables>(SendKeyPressDocument, baseOptions);
      }
export type SendKeyPressMutationHookResult = ReturnType<typeof useSendKeyPressMutation>;
export type SendKeyPressMutationResult = Apollo.MutationResult<SendKeyPressMutation>;
export type SendKeyPressMutationOptions = Apollo.BaseMutationOptions<SendKeyPressMutation, SendKeyPressMutationVariables>;
export const OnKeyPressDocument = gql`
    subscription OnKeyPress {
  onKeypress {
    response {
      isTyping
      username
    }
  }
}
    `;

/**
 * __useOnKeyPressSubscription__
 *
 * To run a query within a React component, call `useOnKeyPressSubscription` and pass it any options that fit your needs.
 * When your component renders, `useOnKeyPressSubscription` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useOnKeyPressSubscription({
 *   variables: {
 *   },
 * });
 */
export function useOnKeyPressSubscription(baseOptions?: Apollo.SubscriptionHookOptions<OnKeyPressSubscription, OnKeyPressSubscriptionVariables>) {
        return Apollo.useSubscription<OnKeyPressSubscription, OnKeyPressSubscriptionVariables>(OnKeyPressDocument, baseOptions);
      }
export type OnKeyPressSubscriptionHookResult = ReturnType<typeof useOnKeyPressSubscription>;
export type OnKeyPressSubscriptionResult = Apollo.SubscriptionResult<OnKeyPressSubscription>;